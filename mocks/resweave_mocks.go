// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/agilitree/resweave (interfaces: Server)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/resweave_mocks.go -package=mocks github.com/agilitree/resweave Server
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	resweave "github.com/agilitree/resweave"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// AddHost mocks base method.
func (m *MockServer) AddHost(arg0 resweave.HostName) (resweave.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHost", arg0)
	ret0, _ := ret[0].(resweave.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHost indicates an expected call of AddHost.
func (mr *MockServerMockRecorder) AddHost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost", reflect.TypeOf((*MockServer)(nil).AddHost), arg0)
}

// AddInterceptor mocks base method.
func (m *MockServer) AddInterceptor(arg0 func(http.Handler) http.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInterceptor", arg0)
}

// AddInterceptor indicates an expected call of AddInterceptor.
func (mr *MockServerMockRecorder) AddInterceptor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInterceptor", reflect.TypeOf((*MockServer)(nil).AddInterceptor), arg0)
}

// AddResource mocks base method.
func (m *MockServer) AddResource(arg0 resweave.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResource indicates an expected call of AddResource.
func (mr *MockServerMockRecorder) AddResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockServer)(nil).AddResource), arg0)
}

// GetHost mocks base method.
func (m *MockServer) GetHost(arg0 resweave.HostName) (resweave.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", arg0)
	ret0, _ := ret[0].(resweave.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost.
func (mr *MockServerMockRecorder) GetHost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockServer)(nil).GetHost), arg0)
}

// GetResource mocks base method.
func (m *MockServer) GetResource(arg0 resweave.ResourceName) (resweave.Resource, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0)
	ret0, _ := ret[0].(resweave.Resource)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockServerMockRecorder) GetResource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockServer)(nil).GetResource), arg0)
}

// Port mocks base method.
func (m *MockServer) Port() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Port")
	ret0, _ := ret[0].(int)
	return ret0
}

// Port indicates an expected call of Port.
func (mr *MockServerMockRecorder) Port() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Port", reflect.TypeOf((*MockServer)(nil).Port))
}

// Run mocks base method.
func (m *MockServer) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockServer)(nil).Run))
}

// Serve mocks base method.
func (m *MockServer) Serve(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", arg0, arg1)
}

// Serve indicates an expected call of Serve.
func (mr *MockServerMockRecorder) Serve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockServer)(nil).Serve), arg0, arg1)
}

// SetLogger mocks base method.
func (m *MockServer) SetLogger(arg0 *zap.SugaredLogger, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0, arg1)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockServerMockRecorder) SetLogger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockServer)(nil).SetLogger), arg0, arg1)
}
